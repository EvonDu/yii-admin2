<?php
namespace common\lib\inherit\model;

use Codeception\Module\Redis;
use Yii;

/**
 * Redis ActiveRecord
 * 这个模型基类，只为了实现Redis缓存，
 * 使用方法：
 *      1、继承这个模型类
 */
class RedisActiveRecord extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static $enableRedis = true;

    /**
     * 根据是否启用Redis返回ActiveQuery
     * @return object|\yii\db\ActiveQuery
     */
    public static function find()
    {
        $class = get_called_class();
        if($class::$enableRedis && isset(Yii::$app->redis))
            return Yii::createObject(RedisActiveQuery::className(), [get_called_class()]);
        else
            return parent::find();
    }

    /**
     * 保存后，删除缓存
     * @param bool $insert
     * @param array $changedAttributes
     */
    public function afterSave($insert, $changedAttributes)
    {
        //操作Redis
        $this->afterRedis($insert);

        //父函数
        return parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * 删除后，删除缓存
     */
    public function afterDelete()
    {
        //操作Redis
        $this->afterRedis(false);

        //父函数
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * 更新与保存后的Redis操作
     * @param bool $insert
     */
    public function afterRedis($insert = false){
        //判断是否有Redis对象
        if(!isset(Yii::$app->redis))
            return;

        //获取信息
        $appid = Yii::$app->id;
        $class = get_called_class();
        $redisOne = "$appid::$class::One";
        $redisAll = "$appid::$class::All";
        $redisKey = "$appid::$class::Key";

        //清除缓存
        RedisActiveIO::deleteKey($redisOne);
        RedisActiveIO::deleteKey($redisAll);
        if(!$insert)
            RedisActiveIO::deleteHashKey($redisKey,$this->primaryKey);
    }
}
